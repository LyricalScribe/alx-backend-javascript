'use strict';

Object.defineProperty(exports, '__esModule', {
  value: true
});
exports.default = getMaxWorkers;
<<<<<<< HEAD

var _os;

function _load_os() {
  return (_os = _interopRequireDefault(require('os')));
=======
function _os() {
  const data = require('os');
  _os = function () {
    return data;
  };
  return data;
>>>>>>> 74277b58428b76b5d4577f14d767a83dccdacaf2
}
/**
<<<<<<< HEAD
 * Copyright (c) 2014-present, Facebook, Inc. All rights reserved.
=======
 * Copyright (c) Meta Platforms, Inc. and affiliates.
>>>>>>> 74277b58428b76b5d4577f14d767a83dccdacaf2
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 *
 */

<<<<<<< HEAD
function getMaxWorkers(argv) {
=======
function getNumCpus() {
  return typeof _os().availableParallelism === 'function'
    ? (0, _os().availableParallelism)()
    : (0, _os().cpus)()?.length ?? 1;
}
function getMaxWorkers(argv, defaultOptions) {
>>>>>>> 74277b58428b76b5d4577f14d767a83dccdacaf2
  if (argv.runInBand) {
    return 1;
  } else if (argv.maxWorkers) {
    return parseInt(argv.maxWorkers, 10);
  } else {
<<<<<<< HEAD
    const cpus = (_os || _load_os()).default.cpus().length;
    return Math.max(argv.watch ? Math.floor(cpus / 2) : cpus - 1, 1);
  }
}
=======
    // In watch mode, Jest should be unobtrusive and not use all available CPUs.
    const numCpus = getNumCpus();
    const isWatchModeEnabled = argv.watch || argv.watchAll;
    return Math.max(
      isWatchModeEnabled ? Math.floor(numCpus / 2) : numCpus - 1,
      1
    );
  }
}
const parseWorkers = maxWorkers => {
  const parsed = parseInt(maxWorkers.toString(), 10);
  if (
    typeof maxWorkers === 'string' &&
    maxWorkers.trim().endsWith('%') &&
    parsed > 0 &&
    parsed <= 100
  ) {
    const numCpus = getNumCpus();
    const workers = Math.floor((parsed / 100) * numCpus);
    return Math.max(workers, 1);
  }
  return parsed > 0 ? parsed : 1;
};
>>>>>>> 74277b58428b76b5d4577f14d767a83dccdacaf2
